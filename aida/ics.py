"""ICS calendar export functionality for AIDA"""

from datetime import datetime
from typing import List
from pathlib import Path
import uuid

from icalendar import Calendar, Event as ICalEvent
from .models import Block


def blocks_to_ics_content(blocks: List[Block]) -> str:
    """Convert blocks to ICS calendar content"""
    
    # Create calendar
    cal = Calendar()
    cal.add('prodid', '-//AIDA//Adaptive Intelligent Day Assistant//EN')
    cal.add('version', '2.0')
    cal.add('calscale', 'GREGORIAN')
    cal.add('method', 'PUBLISH')
    cal.add('x-wr-calname', 'AIDA Day Plan')
    cal.add('x-wr-caldesc', 'Generated by AIDA - Adaptive Intelligent Day Assistant')
    
    # Filter to only pomodoro/break blocks (skip events as they're likely already in calendar)
    relevant_blocks = [b for b in blocks if b.type in ['pomodoro', 'break', 'long_break']]
    
    for block in relevant_blocks:
        event = ICalEvent()
        
        # Basic event properties
        event.add('uid', str(uuid.uuid4()))
        event.add('dtstamp', datetime.utcnow())
        event.add('dtstart', block.start)
        event.add('dtend', block.end)
        event.add('summary', block.title)
        
        # Add description based on block type
        if block.type == 'pomodoro':
            description = f"🍅 Pomodoro session: {block.title}"
            if block.task_id:
                description += f"\nTask ID: {block.task_id}"
            event.add('description', description)
            event.add('categories', 'POMODORO,WORK')
        elif block.type == 'break':
            event.add('description', "☕ Short break - time to rest and recharge")
            event.add('categories', 'BREAK,REST')
        elif block.type == 'long_break':
            event.add('description', "🌟 Long break - perfect time for a walk or snack")
            event.add('categories', 'BREAK,REST,LONG')
        
        # Set priority and other properties
        if block.type == 'pomodoro':
            event.add('priority', 5)  # High priority for work blocks
            event.add('transp', 'OPAQUE')  # Busy
        else:
            event.add('priority', 3)  # Normal priority for breaks
            event.add('transp', 'TRANSPARENT')  # Free
        
        # Add reminders for pomodoro blocks
        if block.type == 'pomodoro':
            # Reminder 2 minutes before start
            alarm = event.add('valarm')
            alarm.add('action', 'DISPLAY')
            alarm.add('trigger', '-PT2M')
            alarm.add('description', f'Pomodoro starting: {block.title}')
        
        cal.add_component(event)
    
    return cal.to_ical().decode('utf-8')


def export_to_ics(blocks: List[Block], output_path: Path):
    """Export blocks to ICS file"""
    ics_content = blocks_to_ics_content(blocks)
    
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(ics_content)
    except Exception as e:
        raise Exception(f"Failed to write ICS file: {e}")


def validate_ics_content(ics_content: str) -> bool:
    """Validate that generated ICS content is well-formed"""
    try:
        Calendar.from_ical(ics_content)
        return True
    except Exception:
        return False


def create_sample_ics(output_path: Path):
    """Create a sample ICS file for testing"""
    from datetime import datetime, timezone, timedelta
    from .models import Block
    
    now = datetime.now(timezone.utc)
    
    sample_blocks = [
        Block(
            start=now,
            end=now + timedelta(minutes=25),
            type="pomodoro",
            title="🍅 Work on project documentation",
            task_id="task-1"
        ),
        Block(
            start=now + timedelta(minutes=25),
            end=now + timedelta(minutes=30),
            type="break",
            title="☕ Break"
        ),
        Block(
            start=now + timedelta(minutes=30),
            end=now + timedelta(minutes=55),
            type="pomodoro",
            title="🍅 Code review session",
            task_id="task-2"
        ),
        Block(
            start=now + timedelta(minutes=55),
            end=now + timedelta(minutes=75),
            type="long_break",
            title="🌟 Long Break"
        )
    ]
    
    export_to_ics(sample_blocks, output_path)